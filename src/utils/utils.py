from typing import List, Dict, Any, Tuple, Optional

import aiohttp
import wikipedia
from aiogram.types import BufferedInputFile  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –≤–º–µ—Å—Ç–æ InputFile
from aiogram.utils.media_group import MediaGroupBuilder
from deep_translator import GoogleTranslator


def get_russian_name_from_latin(latin_name: str, lang: str) -> str:
    wikipedia.set_lang(lang)
    try:
        page = wikipedia.page(latin_name)
        return page.title
    except wikipedia.exceptions.DisambiguationError as e:
        return f"–ù–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç—å: {e.options[:5]}"
    except wikipedia.exceptions.PageError:
        return "–ù–µ –Ω–∞—à—ë–ª —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è"


def format_plant_details(
        json_data: Dict[str, Any],
        language: str = 'ru'
) -> str:
    translation_cache = {}

    def safe_translate(text: str, source_lang: str = 'auto') -> str:
        if not text.strip():
            return text
        if text in translation_cache:
            return translation_cache[text]

        try:
            translator = GoogleTranslator(source=source_lang, target=language)
            translated = translator.translate(text)
            translation_cache[text] = translated
            print(translated)
            return translated
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ '{text[:30]}...': {str(e)}")
            return text

    try:
        result_data = json_data.get('result', {})
        classification = result_data.get('classification', {})
        suggestions = classification.get('suggestions', [])
        plant = suggestions[0] if suggestions else {}
        details = plant.get('details', {}) or {}
        if not isinstance(details, dict):
            details = {}

        latin_name = plant.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ')
        common_names = details.get('common_names', [])
        if isinstance(common_names, str):
            common_names = [common_names]
        elif not isinstance(common_names, list):
            common_names = []
        if language != 'ru':
            plant_names_list = [safe_translate(name) for name in common_names] if common_names else []
            plant_names = " / ".join(plant_names_list) if plant_names_list else safe_translate("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏")
            latin_name = latin_name
            section_title_main = safe_translate("### üå∏ {name}").replace("{name}", plant_names)
            section_title_latin = safe_translate("–õ–∞—Ç–∏–Ω—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        else:
            plant_names = " / ".join(common_names) if common_names else "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏"
            section_title_main = f"### üå∏ {plant_names}"
            section_title_latin = "–õ–∞—Ç–∏–Ω—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"

        result = [f"<b>{section_title_main}</b>", f"<b>{section_title_latin}</b>: <i>{latin_name}</i>\n"]

        if taxonomy := details.get('taxonomy', {}):
            if isinstance(taxonomy, dict):
                tax_title = "#### üåø –¢–∞–∫—Å–æ–Ω–æ–º–∏—è"
                if language != 'ru':
                    tax_title = safe_translate(tax_title)
                result.append(f"<b>{tax_title}</b>")
                tax_map = {
                    'kingdom': '–¶–∞—Ä—Å—Ç–≤–æ',
                    'phylum': '–û—Ç–¥–µ–ª',
                    'class': '–ö–ª–∞—Å—Å',
                    'order': '–ü–æ—Ä—è–¥–æ–∫',
                    'family': '–°–µ–º–µ–π—Å—Ç–≤–æ',
                    'genus': '–†–æ–¥'
                }
                for key, ru_title in tax_map.items():
                    if value := taxonomy.get(key):
                        title_trans = safe_translate(ru_title) if language != 'ru' else ru_title
                        result.append(f"<b>{title_trans}</b>: {value}")
                result.append("")

        # –°–∏–Ω–æ–Ω–∏–º—ã
        if synonyms := details.get('synonyms', []):
            if isinstance(synonyms, list):
                syn_title = "#### üîç –°–∏–Ω–æ–Ω–∏–º—ã"
                if language != 'ru':
                    syn_title = safe_translate(syn_title)
                result.append(f"<b>{syn_title}</b>")
                for synonym in synonyms:
                    trans_syn = safe_translate(synonym) if language != 'ru' else synonym
                    result.append(f"<i>{trans_syn}</i>")
                result.append("")

        # –£—Ö–æ–¥
        care_sections = []
        watering_text = []

        if watering := details.get('watering', {}):
            if isinstance(watering, dict):
                min_val = watering.get('min')
                max_val = watering.get('max')
                if min_val is not None and max_val is not None:
                    try:
                        min_val = float(min_val)
                        max_val = float(max_val)
                        freq_key = "–ß–∞—Å—Ç–æ—Ç–∞"
                        if min_val == max_val:
                            freq = f"{int(min_val)} —Ä–∞–∑{'–∞' if 2 <= min_val <= 4 else ''}"
                        else:
                            freq = f"{int(min_val)}‚Äì{int(max_val)} —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é"
                        if language != 'ru':
                            freq_key = safe_translate(freq_key)
                        watering_text.append(f"<b>{freq_key}</b>: {freq}")
                    except (TypeError, ValueError):
                        pass

        if best_watering := details.get('best_watering'):
            label = "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
            if language != 'ru':
                label = safe_translate(label)
            best_watering = safe_translate(best_watering)
            watering_text.append(f"<b>{label}</b>: {best_watering}")

        if watering_text:
            section = "üíß –ü–æ–ª–∏–≤"
            if language != 'ru':
                section = safe_translate(section)
            care_sections.append(f"<b>{section}</b>\n" + "\n".join(watering_text))

        if light := details.get('best_light_condition'):
            label = "‚òÄÔ∏è –û—Å–≤–µ—â–µ–Ω–∏–µ"
            if language != 'ru':
                label = safe_translate(label)
            light = safe_translate(light)
            care_sections.append(f"<b>{label}</b>\n‚Äî {light}")

        if soil := details.get('best_soil_type'):
            label = "üå± –ü–æ—á–≤–∞"
            if language != 'ru':
                label = safe_translate(label)
            soil = safe_translate(soil)
            care_sections.append(f"<b>{label}</b>\n‚Äî {soil}")

        if care_sections:
            care_title = "#### üíß –£—Ö–æ–¥ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ–º"
            if language != 'ru':
                care_title = safe_translate(care_title)
            result.append(f"<b>{care_title}</b>")
            result.extend(care_sections)
            result.append("")

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
        usage_sections = []

        if toxicity := details.get('toxicity'):
            label = "‚ö†Ô∏è –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å"
            if language != 'ru':
                label = safe_translate(label)
            toxicity = safe_translate(toxicity)
            usage_sections.append(f"<b>{label}</b>\n‚Äî {toxicity}")

        if uses := details.get('common_uses'):
            label = "üåº –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ"
            if language != 'ru':
                label = safe_translate(label)
            uses = safe_translate(uses)
            usage_sections.append(f"<b>{label}</b>\n‚Äî {uses}")

        if culture := details.get('cultural_significance'):
            label = "üéé –ö—É–ª—å—Ç—É—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
            if language != 'ru':
                label = safe_translate(label)
            culture = safe_translate(culture)
            usage_sections.append(f"<b>{label}</b>\n‚Äî {culture}")

        if usage_sections:
            title = "#### üåº –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏"
            if language != 'ru':
                title = safe_translate(title)
            result.append(f"<b>{title}</b>")
            result.extend(usage_sections)
            result.append("")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
        extra_info = []

        edible = details.get('edible_parts')
        edible_label = "–°—ä–µ–¥–æ–±–Ω—ã–µ —á–∞—Å—Ç–∏"
        if edible:
            if language != 'ru':
                edible = safe_translate(edible)
            edible_label = safe_translate(edible_label)
            extra_info.append(f"<b>{edible_label}</b>: {edible}")
        else:
            value = "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
            if language != 'ru':
                edible_label = safe_translate(edible_label)
            value = safe_translate(value)
            extra_info.append(f"<b>{edible_label}</b>: {value}")

        propagation = details.get('propagation_methods')
        prop_label = "–°–ø–æ—Å–æ–±—ã —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è"
        if propagation:
            if language != 'ru':
                prop_label = safe_translate(prop_label)
            propagation = safe_translate(propagation)
            extra_info.append(f"<b>{prop_label}</b>: {propagation}")
        else:
            value = "–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
            if language != 'ru':
                prop_label = safe_translate(prop_label)
            value = safe_translate(value)
            extra_info.append(f"<b>{prop_label}</b>: {value}")

        if extra_info:
            title = "#### ‚ùì –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ"
            if language != 'ru':
                title = safe_translate(title)
            result.append(f"<b>{title}</b>")
            result.extend(extra_info)
            result.append("")
        return "\n".join(result)

    except Exception as e:
        error_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        return safe_translate(error_msg) if language != 'ru' else error_msg


async def download_similar_images(
        similar_images: List[Dict[str, Any]]
) -> List[Tuple[bytes, Dict[str, Any]]]:
    results = []
    async with aiohttp.ClientSession() as session:
        for img in similar_images:
            image_url = img.get("url_small", img.get("url"))
            if not image_url:
                print(f"[WARNING] URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö: {img}")
                continue
            image_url = image_url.strip()
            try:
                async with session.get(image_url) as response:
                    if response.status == 200:
                        image_data = await response.read()
                        metadata = {
                            "similarity": img["similarity"],
                            "license_name": img.get("license_name"),
                            "license_url": img.get("license_url", "").strip() if img.get("license_url") else None,
                            "citation": img.get("citation"),
                            "source_url": image_url
                        }
                        results.append((image_data, metadata))
                        print(f"[INFO] –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}")
                    else:
                        print(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_url}: —Å—Ç–∞—Ç—É—Å {response.status}")
            except Exception as e:
                print(f"[ERROR] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_url}: {str(e)}")

    return results


def build_similar_images_media_group(
        downloaded_images: List[Tuple[bytes, Dict[str, Any]]],
        plant_name: str,
        common_name: Optional[str] = None
) -> Optional[MediaGroupBuilder]:
    if not downloaded_images:
        return None
    media_group = MediaGroupBuilder(caption="")
    plant_info = f"üì∏ <b>–ü–æ—Ö–æ–∂–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b> {plant_name}"
    if common_name:
        plant_info += f" (<i>{common_name}</i>)"

    for i, (image_data, metadata) in enumerate(downloaded_images):
        similarity = f"–°—Ö–æ–¥—Å—Ç–≤–æ: {metadata['similarity'] * 100:.1f}%"
        license_info = ""
        if metadata.get("license_name"):
            license_info = f"\n\n<b>–õ–∏—Ü–µ–Ω–∑–∏—è:</b> {metadata['license_name']}"
            if metadata.get("citation"):
                license_info += f" (–ê–≤—Ç–æ—Ä: {metadata['citation']})"
            if metadata.get("license_url"):
                license_info += f"\n{metadata['license_url']}"
        if i == 0:
            caption = f"{plant_info}\n\n{similarity}{license_info}"
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º BufferedInputFile –≤–º–µ—Å—Ç–æ InputFile
            media_group.add_photo(
                media=BufferedInputFile(image_data, filename=f"plant_{i}.jpg"),
                caption=caption,
                parse_mode="HTML"
            )
        else:
            caption = f"{similarity}{license_info}"
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º BufferedInputFile –≤–º–µ—Å—Ç–æ InputFile
            media_group.add_photo(
                media=BufferedInputFile(image_data, filename=f"plant_{i}.jpg"),
                caption=caption,
                parse_mode="HTML"
            )

    return media_group
